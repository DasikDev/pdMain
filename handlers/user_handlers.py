import logging
from aiogram import Router, Bot, F
from aiogram.filters import StateFilter, Command

from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
)

from keyboards.inline_buttons import home_menu
from main import crete_seo, random_query, improve_seo, mark_answer_create

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("start"))
async def start_bot_command(message: Message, state: FSMContext, bot: Bot):
    await message.answer(
        "<b>üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –¥–µ–º–æ –±–æ—Ç <code>–ü—Ä–æ—Å—Ç–æ –î–æ—Å—Ç–∞–≤–∫–∞</code></b>",
        reply_markup=home_menu()
    )


@router.callback_query(F.data.startswith("mark_answer"))
async def mark_answer_call(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "<b>üü° –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞, –∫–æ—Ç–æ—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—å\n\n–î–ª—è –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, "
        "–º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ —Ç–æ–≤–∞—Ä–∞</b>"
    )
    await state.set_state('mark_answer_state')


@router.message(StateFilter('mark_answer_state'))
async def improve_seo_state(message: Message, state: FSMContext):
    try:
        await message.answer('<b>‚è≥ —Å–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç...</b>')
        await state.clear()
        result = mark_answer_create(message.text)
        await message.reply(
            f"<b>‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.</b>\n\n<code>{result}</code>",
            reply_markup=home_menu()
        )
    except Exception as ex:
        await state.clear()
        print(ex, "mark_answer_state")
        await message.answer(
            '<b>‚ùå–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>',
            reply_markup=home_menu()
        )


@router.callback_query(F.data.startswith("improve_seo"))
async def improve_seo_call(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "<b>üëç –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –µ–≥–æ —É–ª—É—á—à–∏—Ç.</b>"
    )
    await state.set_state('improve_seo_state')


@router.message(StateFilter('improve_seo_state'))
async def improve_seo_state(message: Message, state: FSMContext):
    try:
        await message.answer('<b>‚è≥ —É–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ...</b>')
        await state.clear()
        result = improve_seo(message.text)
        await message.reply(
            f"<b>‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ.</b>\n\n<code>{result}</code>",
            reply_markup=home_menu()
        )
    except Exception as ex:
        await state.clear()
        print(ex, "improve_seo_state")
        await message.answer(
            '<b>‚ùå–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>',
            reply_markup=home_menu()
        )


@router.callback_query(F.data.startswith("question_ii"))
async def random_query_ii_call(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "<b>üëç –û–∫–µ–π, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –æ–Ω–∞ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç.</b>"
    )
    await state.set_state('random_quest_ii')


@router.message(StateFilter('random_quest_ii'))
async def random_quest_state(message: Message, state: FSMContext):
    try:
        await message.answer('<b>‚è≥ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏...</b>')
        await state.clear()
        result = random_query(message.text)
        await message.reply(
            f"<b>‚úÖ –û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.</b>\n\n<code>{result}</code>",
            reply_markup=home_menu()
        )
    except Exception as ex:
        await state.clear()
        print(ex, "random_quest_ii")
        await message.answer(
            '<b>‚ùå–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞</b>',
            reply_markup=home_menu()
        )


@router.callback_query(F.data.startswith("seo_cart"))
async def create_new_seo_call(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        "<b>üëç–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n"
        "1. –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n"
        "2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:\n1. –°–∞–ª—Ñ–µ—Ç–Ω–∏—Ü–∞\n2. –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è, —É–¥–æ–±–Ω–∞—è, —ç—Å—Ç–µ—Ç–∏—á–Ω–∞—è.</i>"
    )
    await state.set_state('set_seo_prompt')


@router.message(StateFilter('set_seo_prompt'))
async def seo_prompt_state(message: Message, state: FSMContext):
    try:
        name = message.text.split('1.')[1].split('\n')[0].strip()
        words = message.text.split('2.')[1].split('\n')[0].strip()
        await message.answer('<b>‚è≥ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏...</b>')
        await state.clear()
        result = crete_seo(name, words)
        await message.answer(
            f"<b>‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.</b>\n\n<code>{result}</code>",
            reply_markup=home_menu()
        )
    except Exception as ex:
        await state.clear()
        print(ex, "seo_prompt_state")
        await message.answer(
            '<b>‚ùå–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ —à–∞–±–ª–æ–Ω—É!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</b>',
            reply_markup=home_menu()
        )